name: lint

on:
    push:
        branches: [master]
        paths:
            - ".github/workflows/lint.rust.yml"
            - "**/*.rs"
            - "**/rustfmt.toml"
            - "**/clippy.toml"
            - "**/build.rs"
            - "**/Cargo.lock"
            - "**/Cargo.toml"
    pull_request:
        branches: [master]
        paths:
            - ".github/workflows/lint.rust.yml"
            - "**/*.rs"
            - "**/rustfmt.toml"
            - "**/clippy.toml"
            - "**/build.rs"
            - "**/Cargo.lock"
            - "**/Cargo.toml"

jobs:
    clippy:
        name: cargo clippy
        if: github.event.pull_request.draft == false
        runs-on: ubuntu-latest
        strategy:
            matrix:
                project:
                    - backend/auth
                    - backend/products
                rust: [stable]
                os: [ubuntu-latest]
        defaults:
            run:
                working-directory: ${{ matrix.project }}

        steps:
            - uses: actions/checkout@v2

            - uses: actions/cache@v3
              with:
                path: |
                  ~/.cargo/bin/
                  ~/.cargo/registry/index/
                  ~/.cargo/registry/cache/
                  ~/.cargo/git/db/
                  ${{ matrix.project }}/target/
                key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: actions-rs/toolchain@v1
              with:
                profile: minimal
                toolchain: stable
                components: clippy
                override: true

            - run: cargo install clippy-sarif sarif-fmt

            - run: cargo clippy --all-targets --all-features --message-format=json |
                clippy-sarif | tee results.sarif | sarif-fmt

            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: results.sarif
              continue-on-error: true

    rustfmt:
        name: cargo fmt
        runs-on: ubuntu-latest
        strategy:
            matrix:
                project:
                    - backend/auth
                    - backend/products
                rust: [stable]
                os: [ubuntu-latest]
        defaults:
            run:
                working-directory: ${{ matrix.project }}

        steps:
            - uses: actions/checkout@v3

            - uses: actions/cache@v3
              with:
                path: |
                  ~/.cargo/bin/
                  ~/.cargo/registry/index/
                  ~/.cargo/registry/cache/
                  ~/.cargo/git/db/
                  ${{ matrix.project }}/target/
                key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

            - uses: actions-rust-lang/setup-rust-toolchain@v1
              with:
                  profile: minimal
                  toolchain: stable
                  components: rustfmt

            - name: Rustfmt Check
              run: cargo fmt --all --check
