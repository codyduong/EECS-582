services:
  auth:
    build: 
      context: .
      dockerfile: Dockerfile.auth
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/auth
      PORT: 8081
      SECRET_KEY: ${JWT_SECRET}
      TEST_PASSWORD: ${TEST_PASSWORD}
      SEED: 1
    restart: always

  products:
    build: 
      context: .
      dockerfile: Dockerfile.products
    ports:
      - "8082:8082"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/products
      PORT: 8082
      SECRET_KEY: ${JWT_SECRET}
      SEED: 1
    restart: always

  gateway:
    ports:
      - "4000:4000"
    build:
      context: ./backend/gateway/
      dockerfile: ./Dockerfile.local
    environment:
      SECRET_KEY: ${JWT_SECRET}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    develop:
      watch:
        - action: sync+restart
          path: ./backend/gateway/supergraph.graphql
          target: /supergraph.graphql

  db:
    image: timescale/timescaledb:latest-pg17
    ports:
      - "6001:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - database:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  database: