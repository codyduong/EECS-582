
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  
  
  
  
  
  @link(
  url: "https://the-guild.dev/graphql/mesh/spec/v1.0"
  import: ["@httpOperation", "@transport", "@extraSchemaDefinitionDirective", "@length", "@resolveRoot", "@enum"]
)
{
  query: Query
  mutation: Mutation
  
}


  directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

  directive @join__field(
    graph: join__Graph
    requires: join__FieldSet
    provides: join__FieldSet
    type: String
    external: Boolean
    override: String
    usedOverridden: Boolean
  ) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

  directive @join__graph(name: String!, url: String!) on ENUM_VALUE

  directive @join__implements(
    graph: join__Graph!
    interface: String!
  ) repeatable on OBJECT | INTERFACE

  directive @join__type(
    graph: join__Graph!
    key: join__FieldSet
    extension: Boolean! = false
    resolvable: Boolean! = true
    isInterfaceObject: Boolean! = false
  ) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

  directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

  scalar join__FieldSet


  directive @link(
    url: String
    as: String
    for: link__Purpose
    import: [link__Import]
  ) repeatable on SCHEMA

  scalar link__Import

  enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
  }







enum join__Graph {
  AUTH @join__graph(name: "Auth", url: "") 
  PRODUCTS @join__graph(name: "Products", url: "") 
}

directive @httpOperation(
  subgraph: String
  path: String
  operationSpecificHeaders: [[String]]
  httpMethod: HTTPMethod
  isBinary: Boolean
  requestBaseBody: ObjMap
  queryParamArgMap: ObjMap
  queryStringOptionsByParam: ObjMap
  jsonApiFields: Boolean
  queryStringOptions: ObjMap
) repeatable on FIELD_DEFINITION

directive @transport(
  subgraph: String
  kind: String
  location: String
  headers: [[String]]
  queryStringOptions: ObjMap
  queryParams: [[String]]
) repeatable on SCHEMA

directive @extraSchemaDefinitionDirective(directives: _DirectiveExtensions)  repeatable on OBJECT

directive @length(subgraph: String, min: Int, max: Int)  repeatable on SCALAR

directive @resolveRoot(subgraph: String)  repeatable on FIELD_DEFINITION

directive @enum(subgraph: String, value: String)  repeatable on ENUM_VALUE

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime @join__type(graph: AUTH)  @join__type(graph: PRODUCTS) 

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @join__type(graph: AUTH)  @specifiedBy(
  url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
)

scalar ObjMap @join__type(graph: AUTH)  @join__type(graph: PRODUCTS) 

scalar _DirectiveExtensions @join__type(graph: AUTH)  @join__type(graph: PRODUCTS) 

scalar queryInput_post_image_input_items_gtin @length(subgraph: "Products", min: 8, max: 14)  @join__type(graph: PRODUCTS) 

"""
Represents empty values
"""
scalar Void @join__type(graph: PRODUCTS) 

scalar query_get_image_oneOf_1_gtin @length(subgraph: "Products", min: 8, max: 14)  @join__type(graph: PRODUCTS) 

scalar query_get_products_items_allOf_0_gtin @length(subgraph: "Products", min: 8, max: 14)  @join__type(graph: PRODUCTS) 

scalar query_get_products_items_allOf_1_measures_items_allOf_0_gtin @length(subgraph: "Products", min: 8, max: 14)  @join__type(graph: PRODUCTS) 

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt @join__type(graph: PRODUCTS) 

scalar mutationInput_post_products_input_items_allOf_0_gtin @length(subgraph: "Products", min: 8, max: 14)  @join__type(graph: PRODUCTS) 

type Query @extraSchemaDefinitionDirective(
  directives: {transport: [{subgraph: "Auth", kind: "rest", headers: [["Content-Type", "application/json"], ["authorization", "Bearer {context.headers[\"authorization\"]}"]]}]}
) @extraSchemaDefinitionDirective(
  directives: {transport: [{subgraph: "Products", kind: "rest", headers: [["Content-Type", "application/json"], ["authorization", "Bearer {context.headers[\"authorization\"]}"]]}]}
) @join__type(graph: AUTH)  @join__type(graph: PRODUCTS)  {
  get_users_route: [UserResponse] @httpOperation(
    subgraph: "Auth"
    path: "/api/v1/users"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: AUTH) 
  get_user_route("""
  User id
  """
  id: Int!) : UserResponse @httpOperation(
    subgraph: "Auth"
    path: "/api/v1/users/{args.id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: AUTH) 
  get_marketplaces: [Marketplace] @httpOperation(
    subgraph: "Products"
    path: "/api/v1/marketplaces"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: PRODUCTS) 
  get_marketplace("""
  id
  """
  id: Int!) : Marketplace @httpOperation(
    subgraph: "Products"
    path: "/api/v1/marketplaces/{args.id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: PRODUCTS) 
  post_image(input: [NewProductToImage_Input]) : Boolean @httpOperation(
    subgraph: "Products"
    path: "/api/v1/product_to_image"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "text/plain"]]
    httpMethod: GET
  ) @join__field(graph: PRODUCTS) 
  get_image(id: String!) : get_image_200_response @httpOperation(
    subgraph: "Products"
    path: "/api/v1/product_to_image/{args.id}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: PRODUCTS) 
  get_products: [ProductResponse] @httpOperation(
    subgraph: "Products"
    path: "/api/v1/products"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: PRODUCTS) 
  get_product("""
  Global Trade Item Number (gtin)
  """
  gtin: String!) : ProductResponse @httpOperation(
    subgraph: "Products"
    path: "/api/v1/products/{args.gtin}"
    operationSpecificHeaders: [["accept", "application/json"]]
    httpMethod: GET
  ) @join__field(graph: PRODUCTS) 
}

type UserResponse @join__type(graph: AUTH)  {
  created_at: DateTime!
  deleted: Boolean!
  deleted_at: DateTime
  email: String!
  id: Int!
  username: String
}

type Mutation @join__type(graph: AUTH)  @join__type(graph: PRODUCTS)  {
  login_route(input: LoginRequest_Input) : JSON @httpOperation(
    subgraph: "Auth"
    path: "/api/v1/auth/login"
    operationSpecificHeaders: [["Content-Type", "application/json"]]
    httpMethod: POST
  ) @join__field(graph: AUTH) 
  refresh_route: JSON @httpOperation(subgraph: "Auth", path: "/api/v1/auth/refresh", httpMethod: POST)  @join__field(graph: AUTH) 
  register_route(input: RegisterRequest_Input) : JSON @httpOperation(
    subgraph: "Auth"
    path: "/api/v1/auth/register"
    operationSpecificHeaders: [["Content-Type", "application/json"]]
    httpMethod: POST
  ) @join__field(graph: AUTH) 
  post_marketplace(input: NewMarketplace_Input) : Marketplace @httpOperation(
    subgraph: "Products"
    path: "/api/v1/marketplaces"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "application/json"]]
    httpMethod: POST
  ) @join__field(graph: PRODUCTS) 
  post_products(input: [NewProductPost_Input]) : Boolean @httpOperation(
    subgraph: "Products"
    path: "/api/v1/products"
    operationSpecificHeaders: [["Content-Type", "application/json"], ["accept", "text/plain"]]
    httpMethod: POST
  ) @join__field(graph: PRODUCTS) 
}

type Marketplace @join__type(graph: PRODUCTS)  {
  id: Int!
  name: String!
}

type Void_container @join__type(graph: PRODUCTS)  {
  Void: Void @resolveRoot(subgraph: "Products") 
}

type ProductToImage @join__type(graph: PRODUCTS)  {
  created_at: DateTime!
  gtin: query_get_image_oneOf_1_gtin!
  id: Int!
  image_url: String!
  updated_at: DateTime!
}

type ProductResponse @join__type(graph: PRODUCTS)  {
  created_at: DateTime!
  gtin: query_get_products_items_allOf_0_gtin!
  productname: String!
  sellsinraw: Boolean!
  sku: String
  updated_at: DateTime!
  images: [ProductToImage]!
  measures: [ProductToMeasureResponse]!
}

type ProductToMeasureResponse @join__type(graph: PRODUCTS)  {
  amount: String!
  created_at: DateTime!
  gtin: query_get_products_items_allOf_1_measures_items_allOf_0_gtin!
  id: BigInt!
  is_converted: Boolean
  is_primary_measure: Boolean!
  raw_amount: Float!
  unit_id: Int!
  unit: Unit!
}

type Unit @join__type(graph: PRODUCTS)  {
  id: Int!
  symbol: UnitSymbol!
}

union get_image_200_response @join__type(graph: PRODUCTS)  @join__unionMember(graph: PRODUCTS, member: "Void_container")  @join__unionMember(graph: PRODUCTS, member: "ProductToImage")  = Void_container | ProductToImage

enum HTTPMethod @join__type(graph: AUTH)  @join__type(graph: PRODUCTS)  {
  GET @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  HEAD @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  POST @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  PUT @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  DELETE @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  CONNECT @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  OPTIONS @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  TRACE @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
  PATCH @join__enumValue(graph: AUTH)  @join__enumValue(graph: PRODUCTS) 
}

enum UnitSymbol @join__type(graph: PRODUCTS)  {
  fl_oz @enum(subgraph: "Products", value: "\"fl oz\"")  @join__enumValue(graph: PRODUCTS) 
  oz @join__enumValue(graph: PRODUCTS) 
  mL @join__enumValue(graph: PRODUCTS) 
  g @join__enumValue(graph: PRODUCTS) 
  count @join__enumValue(graph: PRODUCTS) 
}

"""
Login request. Either `email` or `username` must be provided.
"""
input LoginRequest_Input @join__type(graph: AUTH)  {
  email: String
  password: String!
  username: String
}

input RegisterRequest_Input @join__type(graph: AUTH)  {
  email: String!
  password: String!
  username: String
}

input NewProductToImage_Input @join__type(graph: PRODUCTS)  {
  gtin: queryInput_post_image_input_items_gtin!
  image_url: String!
}

input NewMarketplace_Input @join__type(graph: PRODUCTS)  {
  name: String!
}

input NewProductPost_Input @join__type(graph: PRODUCTS)  {
  gtin: mutationInput_post_products_input_items_allOf_0_gtin!
  productname: String!
  sku: String
  measures: NewProductToMeasurePost_Input!
}

input NewProductToMeasurePost_Input @join__type(graph: PRODUCTS)  {
  amount: Float!
  is_converted: Boolean
  is_primary_measure: Boolean!
  raw_amount: Float!
  unit: UnitSymbol!
}
    