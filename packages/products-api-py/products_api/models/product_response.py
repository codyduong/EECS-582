# coding: utf-8

"""
    products

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from products_api.models.product_to_measure_response import ProductToMeasureResponse

class ProductResponse(BaseModel):
    """
    ProductResponse
    """
    created_at: datetime = Field(...)
    gtin: constr(strict=True, max_length=14, min_length=8) = Field(...)
    productname: StrictStr = Field(...)
    sellsinraw: StrictBool = Field(...)
    sku: Optional[StrictStr] = None
    updated_at: datetime = Field(...)
    measures: conlist(ProductToMeasureResponse) = Field(...)
    __properties = ["created_at", "gtin", "productname", "sellsinraw", "sku", "updated_at", "measures"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductResponse:
        """Create an instance of ProductResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measures (list)
        _items = []
        if self.measures:
            for _item in self.measures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['measures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductResponse:
        """Create an instance of ProductResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductResponse.parse_obj(obj)

        _obj = ProductResponse.parse_obj({
            "created_at": obj.get("created_at"),
            "gtin": obj.get("gtin"),
            "productname": obj.get("productname"),
            "sellsinraw": obj.get("sellsinraw"),
            "sku": obj.get("sku"),
            "updated_at": obj.get("updated_at"),
            "measures": [ProductToMeasureResponse.from_dict(_item) for _item in obj.get("measures")] if obj.get("measures") is not None else None
        })
        return _obj


