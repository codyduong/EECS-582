# coding: utf-8

"""
    products

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt

class NewProductToMeasurePartial(BaseModel):
    """
    NewProductToMeasurePartial
    """
    amount: Union[StrictFloat, StrictInt] = Field(...)
    is_converted: Optional[StrictBool] = None
    is_primary_measure: StrictBool = Field(...)
    raw_amount: Union[StrictFloat, StrictInt] = Field(...)
    __properties = ["amount", "is_converted", "is_primary_measure", "raw_amount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NewProductToMeasurePartial:
        """Create an instance of NewProductToMeasurePartial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if is_converted (nullable) is None
        # and __fields_set__ contains the field
        if self.is_converted is None and "is_converted" in self.__fields_set__:
            _dict['is_converted'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NewProductToMeasurePartial:
        """Create an instance of NewProductToMeasurePartial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NewProductToMeasurePartial.parse_obj(obj)

        _obj = NewProductToMeasurePartial.parse_obj({
            "amount": obj.get("amount"),
            "is_converted": obj.get("is_converted"),
            "is_primary_measure": obj.get("is_primary_measure"),
            "raw_amount": obj.get("raw_amount")
        })
        return _obj


